#!/bin/sh
# CQ Unix Toolkit
# Copyright (C) 2013 Cognifide Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
_usage()
{
    cat <<EOT
Usage: $(basename "${0}") [OPTION...] package-resource-name
Makes local copy of already uploaded package by group id and name in CQ Package
Manager using instance URL.

Examples:
  cqcp -u admin pack            # Get package copy named pack
  cqcp -u admin -g GRP pack     # Get package copy named pack in group GRP
  cqcp -i http://localhost:5510 # Get package copy for localhost instance on
       -g com.group stuff       # tcp port 5510 named stuff in group:com.group
       -p secret                # with password provided: secret
       -o alt-stuff.zip         # with local name specified as alt-stuff.zip

Options:

  -u                    use specified usernamed for connection
  -p                    use provided password for authentication
  -i                    use specified instance URL to connect
  -g                    locate package by additional group ID
  -o                    store local copy of package using provided filename
                        or path

EOT
exit 1
}

CWD=$(dirname "${0}")
API="${CWD}/cqapi"
"${API}" -P >/dev/null
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find or test cqapi command" >&2
    exit 1
fi

CURLBIN=$("${API}" -c)
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find curl" >&2
    exit 1
fi

# API common options
cmdapi=$("${API}" -P "${@}")
username=$(echo "${cmdapi}" | cut -f1)
password=$(echo "${cmdapi}" | cut -f2)
instance=$(echo "${cmdapi}" | cut -f3)
passed=$(echo "${cmdapi}" | cut -f4)
apigetopts=$(echo "${cmdapi}" | cut -f5)

# Custom arguments
while getopts ":o:g:${apigetopts}" opt
do
    case ${opt} in
        g)
            group="${OPTARG}";;
        o)
            outfile="${OPTARG}";;
        \?)
            echo "Invalid option: -${OPTARG}" >&2; _usage;;
        :)
            echo "Option -${OPTARG} requires an argument." >&2; _usage;;
    esac
done
shift $((OPTIND-1))

if [ ${#} -ne 1 -o "${passed}" -eq 0 ];
then
    _usage
fi
name=${1}

group_switch="-F"
group_arg="group=${group}"

if [ -z "${outfile}" ]
then
    outfile="${name}.zip"
fi
redirection="${outfile}"

REFERER="${instance}/etc/packages"
AUTH="${username}:${password}"
FILEPATH="/crx/packmgr/service.jsp"
REFERERHEADER="Referer: ${REFERER}"

STATUS=$(${CURLBIN} \
    -k \
    -s \
    -u "${AUTH}" \
    -H "${REFERERHEADER}" \
    --write-out '%{content_type} %{http_code}' \
    -o /dev/null \
    -F cmd=get \
    -F "name=${name}" \
    ${group_switch} "${group_arg}" \
    "${instance}${FILEPATH}")

EXITCODE=${?}
"${API}" -C ${EXITCODE}
STATUSFIELDS=$(echo "${STATUS}" | tail -n 1)
STATUSCODE=$(echo "${STATUSFIELDS}" | cut -f2 -d ' ')
CONTENTTYPE=$(echo "${STATUSFIELDS}" | cut -f1 -d ' ')
"${API}" -H "${STATUSCODE}"
EXITCODE2=${?}
fullfile=$(readlink -f "${outfile}")
plain=0
if [ "${EXITCODE2}" -eq 0 -a ${EXITCODE} -eq 0 ]
then
    plain=$(echo "${CONTENTTYPE}" | grep -c 'plain')
fi

EXITCODE=$((EXITCODE + EXITCODE2))
if [ ${EXITCODE} -ne 0 ]
then
    exit ${EXITCODE}
fi

if [ "${plain}" -eq 1 ]
then
    redirection="-"
fi

STATUS=$(${CURLBIN} \
    -k \
    -s \
    --write-out "%{http_code}" \
    -u "${AUTH}" \
    -H "${REFERERHEADER}" \
    -F cmd=get \
    -o "${redirection}" \
    -F "name=${name}" \
    ${group_switch} "${group_arg}" \
    "${instance}${FILEPATH}")

EXITCODE=${?}
"${API}" -C ${EXITCODE}
STATUSCODE=$(echo "${STATUS}" | tail -n 1 | cut -f2- -d ' ')
STATUS=$(echo "${STATUS}" | sed '$d')
"${API}" -H "${STATUSCODE}"
EXITCODE2=${?}
if [ ${EXITCODE2} -eq 0 -a ${EXITCODE} -eq 0 ]
then
    if [ "${plain}" -eq 0 ]
    then
        echo "Package copied to: '${fullfile}'"
    else
        echo "${STATUS}"
    fi
fi
exit $((EXITCODE + EXITCODE2))

