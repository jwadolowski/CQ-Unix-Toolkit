#!/bin/sh
# CQ Unix Toolkit
# Copyright (C) 2013 Cognifide Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
_usage()
{
    cat <<EOT
Usage: $(basename "${0}") [OPTION...]
List all packages in CQ Package Manager using instance URL.

Examples:
  cqls -u admin                 # List packages for localinstance
  cqls -i http://localhost:5510 # List packages for localhost instance on tcp
       -p secret                # port 5510 with password provided: secret

Options:

  -u                    use specified username for connection
  -p                    use provided password for authentication
  -i                    use specified instance URL to connect
  -1                    list only package names without summary
  -l                    list all fields (dates) with summary
  -m                    list all fields without summary in machine-readable
                        format
  -x                    output original raw response from CQ (portable and the
                        fastest one)

EOT
exit 1
}


_print_preformatted()
{
    SEP='|'
    TB=$(printf "\t")
    STATUS=${1}
    mode=${2}
    machine=${3}
    fields_num=11
    case ${mode} in
        1)
            fields_num=1;;
        2)
            fields_num=5;;
        3)
            fields_num=11;;
    esac
    PLACEHOLDER=">([^\<]*)</"
    NONPLACEHOLDER=">[^\<]*</"
    KEY1="group"
    KEY2="name"
    KEY3="version"
    KEY4="downloadName"
    KEY5="size"
    KEY6="created"
    KEY7="createdBy"
    KEY8="lastModified"
    KEY9="lastModifiedBy"
    KEY10="lastUnpacked"
    KEY11="lastUnpackedBy"

    G1="<${KEY1}${PLACEHOLDER}${KEY1}>"
    G2="<${KEY2}${PLACEHOLDER}${KEY2}>"
    G3="<${KEY3}${PLACEHOLDER}${KEY3}>"
    G4="<${KEY4}${PLACEHOLDER}${KEY4}>"
    G5="<${KEY5}${PLACEHOLDER}${KEY5}>"

    X6="<${KEY6}${NONPLACEHOLDER}${KEY6}>"
    X7="<${KEY7}${NONPLACEHOLDER}${KEY7}>"
    X8="<${KEY8}${NONPLACEHOLDER}${KEY8}>"
    X9="<${KEY9}${NONPLACEHOLDER}${KEY9}>"
    X10="<${KEY10}${NONPLACEHOLDER}${KEY10}>"
    X11="<${KEY11}${NONPLACEHOLDER}${KEY11}>"

    REGEXP1=".*${G1}${G2}${G3}${G4}${G5}(${X6}${X7}${X8}${X9}${X10}${X11}).*"
    ORDERING1="\2${TB}\1${TB}\3${TB}\5${TB}\4${TB}\6"

    G2="<${KEY6}${PLACEHOLDER}${KEY6}>"
    G3="<${KEY7}${PLACEHOLDER}${KEY7}>"
    G4="<${KEY8}${PLACEHOLDER}${KEY8}>"
    G5="<${KEY9}${PLACEHOLDER}${KEY9}>"
    G6="<${KEY10}${PLACEHOLDER}${KEY10}>"
    G7="<${KEY11}${PLACEHOLDER}${KEY11}>"

    REGEXP2="(.*)${G2}${G3}${G4}${G5}${G6}${G7}.*"
    ORDERING2="\1\2${TB}\3${TB}\4${TB}\5${TB}\6${TB}\7"

    filtered_items=$(printf "%s" "${STATUS}" | tr -d '\n' \
        | sed "s/<package>/${TB}<package>/g" | tr '\t' '\n' \
        | ${SEDX} 's/> +</></g' | grep -E "${REGEXP1}")
    items=$(printf "%s" "${filtered_items}" \
        | ${SEDX} "s#${REGEXP1}#${ORDERING1}#" \
        | ${SEDX} "s#${REGEXP2}#${ORDERING2}#" | sort -nk1 -t "${TB}" \
        | cut -f1-${fields_num})
    total=$(printf "%s\n" "${items}" | wc -l | tr -d ' ')
    if [ "${machine}" -eq 0 ]
    then
        printf "%s packages\n\n" "${total}"
        H1="NAME|GROUP|VERSION|SIZE|DOWNLOAD_NAME"
        H2="|CREATED|CREATED_BY|MODIFIED|MODIFIED_BY|INSTALLED|INSTALLED_BY"
        header="${H1}${H2}"
        output=$(printf "%s\n" "${header}" | cut -f1-${fields_num} -d '|')
        output=$(printf "%s\n%s" "${output}" "${items}")
    else
        output="${items}"
    fi
    if [ "${machine}" -eq 1 ]
    then
        printf "%s\n" "${output}"
    else
        COLUMN=$(which column)
        if [ ${?} -ne 0 -o -z "${COLUMN}" ]
        then
            echo "Cannot find column utility" >&2
            exit 1
        fi
        printf "%s\n" "${output}" | tr '\t' "${SEP}" \
            | ${COLUMN} -xt -c ${fields_num} -s "${SEP}" 2>/dev/null
    fi
}

CWD=$(dirname "${0}")
API="${CWD}/cqapi"
"${API}" -P >/dev/null
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find or test cqapi command" >&2
    exit 1
fi

CURLBIN=$("${API}" -c)
if [ ${?} -ne 0 ]
then
    echo "Fatal: cannot find curl" >&2
    exit 1
fi
SEDX=$("${API}" -s)

# API common options
cmdapi=$("${API}" -P "${@}")
username=$(echo "${cmdapi}" | cut -f1)
password=$(echo "${cmdapi}" | cut -f2)
instance=$(echo "${cmdapi}" | cut -f3)
passed=$(echo "${cmdapi}" | cut -f4)
apigetopts=$(echo "${cmdapi}" | cut -f5)

# Custom arguments
listing_long=0
listing_names=0
listing_machine=0
listing_mode=2
listing_original=0
while getopts ":l1mx${apigetopts}" opt
do
    case ${opt} in
        l)
            listing_long=1
            listing_mode=3;;
        1)
            listing_names=1
            listing_mode=1;;
        m)
            listing_machine=1;;
        x)
            listing_original=1;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2; _usage;;
        :)
            echo "Option -${OPTARG} requires an argument." >&2; _usage;;
    esac
done
shift $((OPTIND-1))

validation1=$((listing_long+listing_names+listing_original))
if [ ${validation1} -ge 2 ]
then
    echo "Listing options -l, -1, and -x cannot be used together. Choose one."
    _usage
fi

validation2=$((listing_original+listing_machine))
if [ ${validation2} -eq 2 ]
then
    echo "Listing options -m and -x cannot be used together. Choose one."
    _usage
fi

if [ ${#} -gt 0 -o "${passed}" -eq 0 ];
then
    _usage
fi

REFERER="${instance}/crx/packmgr"
AUTH="${username}:${password}"
FILEPATH="/crx/packmgr/service.jsp"
REFERERHEADER="Referer: ${REFERER}"

STATUS=$(${CURLBIN} \
    -k \
    -s \
    --write-out "%{http_code}" \
    -u "${AUTH}" \
    -H "${REFERERHEADER}" \
    -F cmd=ls \
    "${instance}${FILEPATH}")

EXITCODE=${?}
"${API}" -C ${EXITCODE}
if [ ${EXITCODE} -ne 0 ]
then
    echo "Couldn't get packages list" >&2
    exit ${EXITCODE}
fi

STATUSCODE=$(echo "${STATUS}" | tail -n 1)
"${API}" -H "${STATUSCODE}"
EXITCODE2=${?}
if [ ${EXITCODE2} -ne 0 ]
then
    echo "Couldn't get packages list" >&2
    exit ${EXITCODE2}
fi

STATUS=$(echo "${STATUS}" | sed '$d')
if [ ${listing_original} -eq 1 ]
then
    echo "${STATUS}"
else
    _print_preformatted "${STATUS}" ${listing_mode} ${listing_machine}
fi
exit 0

